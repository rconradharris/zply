- Add workflow command to capture
    apply-patches -b foo
    refresh-patches -b foo
        Use -d for diff
        Use -c for commit
        Add -p <remote> to push to repo

        Add -i interactive mode for commit
            here we ask to diff
            ask to commit
            ask to push

    zply-commit [-d] [-i] [-p <remote>]
        * -d show diff
        * -i interactive
        * -p push <remote>

- Missing blob issue:

    Observation: the missing blob issue is a consequence of how git implements
    3way merge. If we want to retain the convenience of it, we just have
    accept that some merge conflicts will be non-deterministic.

    However, packagers should not have to accept that: they shouldn't care
    about merges at all.

    The solution is to *export* a single, plain diff file against a project,
    which will be guaranteed to apply cleanly.

    The name of the diff would have the commit-hashed that it was based on, so
    people receiving the patch know which *upstream* commit it will apply
    cleanly to. For example:

    842.<hash>.diff

- Make flow chart documentation for each workflow
    - Packaging
    - Refreshing all patches
        * 3way merge conflict
        * 2way merge conflict
    - Adding a new patch
    - Removing a patch

DOCS
- Add man git-zply for workflow documentation (use <file>.5)

CLEANUP
- Remove python dependencies (just bash)
- Better handle trailing-whitespace fixup (sed?)

TESTING
- Add test-harness for diff
- Add test-harness for fixup

SCREENCAST
- Show basic workflow


Workflow helpers


git apply-patches -b <branch> <patch-repo-dir>
    # Create working-repo branch
    git am --3way ../patch-repo/*.patch

git refresh-patches -b <branch> <patch-repo-dir> since



ZPLY_PATCH_REPO_PULL should not be environment variable
ZPLY_UPSTREAM_REPO_PULL should not be environment variable

in working-repo:
    .git/zplyconfig:
        ZPLY_COLOR=1
        ZPLY_INTERACTIVE=1

        ZPLY_PATCH_REPO_DIR=foo

        ZPLY_UPSTREAM_REMOTE=ohthree
        ZPLY_UPSTREAM_BRANCH=upstream

        ZPLY_PATCH_REPO_REMOTE=origin
        ZPLY_PATCH_REPO_BRANCH=master

        ZPLY_FORMAT_PATCH_DIR=.patches



git apply-patches -b foo ../zply-nova
git refresh-patches -b foo -c ../zply-nova upstream


- Apply and Refresh
    cd ../working-repo
    git am --3way ../patch-repo/*.patch

- Finalize
    git refresh-patches ../patch-repo upstream
    cd ../patch-repo
    git commit -a -m "Message"
    git push $PATCH_REPO_REMOTE $TOPIC

    # Delete patch-repo branch
    # Delete working-repo branch
