#!/bin/bash
CMD="git zply-format"
USAGE="usage: $CMD [-h] [-o <output-dir>] [-v] [since]"
VERSION=0.1
OUTPUT_DIR=.

function die() {
    >&2 echo "[$CMD error]: $@"
    exit 1
}

function die_usage() {
    >&2 echo $USAGE
    exit 1
}

function help() {
    echo $USAGE
    exit 0
}

function read_config() {
    if [[ -e .git/zply ]]; then
        sed -e '/^#/d' -e 's/^/export /' < .git/zply > .git/zply.tmp
        source .git/zply.tmp
        rm .git/zply.tmp
    fi
}

function version() {
    echo $VERSION
    exit 0
}

# MAIN
read_config

while getopts 'ho:v' opt; do
    case $opt in
        h) help;;
        o) OUTPUT_DIR=$OPTARG;;
        v) version;;
        *) die_usage;;
    esac
done
shift $(($OPTIND - 1))

if [[ -n $1 ]]; then
    SINCE=$1
elif [[ -n $ZPLY_UPSTREAM_BRANCH ]]; then
    SINCE=$ZPLY_UPSTREAM_BRANCH
else
    die "Must set ZPLY_UPSTREAM_BRANCH or supply <since> argument"
fi

# Convert `since` to a commit hash
git rev-parse -q --verify $SINCE > /dev/null || die "Revision $SINCE not found"
SINCE=`git rev-parse $SINCE`

if [[ -e .git/rebase-apply ]]; then
    die "Cannot format patches while a rebase is in progress (in the middle of git am?)"
fi

git format-patch -kpo $OUTPUT_DIR $SINCE > /dev/null || die "git format-patch failed"

# Make sure we generated at least one patch file
ls $OUTPUT_DIR/*.patch 2>&1 > /dev/null
if [[ $? -ne 0 ]]; then
    die "No patch files generated (did you forget to run git am?)"
fi

for patch in `ls $OUTPUT_DIR/*.patch`; do
    git zply-fixup $patch > $patch.tmp || die "git zply-fixup failed"
    mv $patch.tmp $patch
done

echo $SINCE > $OUTPUT_DIR/.based-on
