#!/bin/bash
CMD='git refresh-patches'
USAGE="usage: $CMD [-b <branch>] [-cC] [-h] [-pP] [-r <patch-repo-dir>] [-v] [since]"
VERSION=0.1

function die() {
    >&2 echo "[$CMD error]: $@"
    exit 2
}

function die_usage() {
    >&2 echo $USAGE
    exit 2
}

function help() {
    echo $USAGE
    exit 0
}

function read_config() {
    if [[ -e .git/zply ]]; then
        sed -e '/^\s*$/d' -e '/^#/d' -e 's/^/export /' < .git/zply > .git/zply.tmp
        source .git/zply.tmp
        rm .git/zply.tmp
    fi
}

function version() {
    echo $VERSION
    exit 0
}

# MAIN
read_config

while getopts 'b:chpPr:v' opt; do
    case $opt in
        b) BRANCH=$OPTARG;;
        c) ZPLY_REFRESH_COMMIT=1;;
        C) ZPLY_REFRESH_COMMIT=0;;
        h) help;;
        p) PULL_REPO=1;;
        P) PULL_REPO=0;;
        r) ZPLY_PATCH_REPO_DIR=$OPTARG;;
        v) version;;
        *) die_usage;;
    esac
done
shift $(($OPTIND - 1))

if [[ -n $1 ]]; then
    SINCE=$1
elif [[ -n $ZPLY_UPSTREAM_BRANCH ]]; then
    SINCE=$ZPLY_UPSTREAM_BRANCH
else
    die "Must set ZPLY_UPSTREAM_BRANCH or supply <since> argument"
fi

if [[ -z $ZPLY_PATCH_REPO_DIR ]]; then
    die "Must set ZPLY_PATCH_REPO_DIR or use -r <patch-repo-dir> option"
fi

PATCHES_DIR=$PWD/.patches

if [[ -n $BRANCH ]]; then
    BRANCH_OPT="-b $BRANCH"
fi

if [[ -n $PULL_REPO ]]; then
    if [[ $PULL_REPO -eq 0 ]]; then
        PULL_REPO_OPT=-P
    elif [[ $PULL_REPO -eq 1 ]]; then
        PULL_REPO_OPT=-p
    fi
fi

git zply-format -o $PATCHES_DIR $SINCE || die "git zply-format failed"
git zply-sync $BRANCH_OPT $PULL_REPO_OPT -r $ZPLY_PATCH_REPO_DIR $PATCHES_DIR
SYNC_RET=$?
if [[ $SYNC_RET -gt 1 ]]; then
    die "git zply-sync failed"
fi

if [[ $ZPLY_REFRESH_COMMIT -eq 1 ]]; then
    git commit-patches || die "git commit-patches failed"
fi

rm -rf $PATCHES_DIR
exit $SYNC_RET
