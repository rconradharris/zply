#!/usr/bin/env python
"""
NAME

    git zply-fixup: fixup a *.patch file

DESCRIPTION

    Patch files generated by `git` have some lines that change unecessarily
    leading to 'chatty-diffs' in the patch-repo. To avoid this, this command
    strips out:

        * The `From <sha1> <magic-date>` line (line 1)
        * The git version part (last 4 lines)
        * Any trailing blank lines in the subject (different versions of git
          choose whether to trim or not trim this by default)

SYNOPSIS

    git zply-fixup <filename>

OUTPUT

    Prints revised patch to stdout.

EXIT STATUS

    0 - success
    1 - not used
    2 - usage error
    3 - on or more input files not present

NOTE

    This is an INTERNAL command used by git save-patch
"""
import os
import sys

VERSION = '0.1'


def _remove_trailing_extra_blank_lines_from_subject(lines):
    """Different versions of git will output different amounts of trailing
    whitespace at the end of a subject headers, so we normalize it by only
    allowing a single trailing blank line.
    """
    for idx, line in enumerate(lines):
        if line.startswith('diff --git'):
            break
    else:
        return

    if idx < 2:
        return

    # If we have two blanks above first `diff --git` remove one of them
    if not lines[idx - 1].strip() and not lines[idx - 2].strip():
        del lines[idx - 1]


def _fixup(lines):
    # Delete From <hash> <magic-date> line
    del lines[0]

    # Delete git version
    del lines[-1]
    del lines[-1]
    del lines[-1]
    del lines[-1]

    _remove_trailing_extra_blank_lines_from_subject(lines)


def usage():
    print >> sys.stderr, "usage: git zply-fixup [-h] [-v] <patch-file>"
    sys.exit(2)


def version():
    print VERSION
    sys.exit(0)


def main():
    if '-h' in sys.argv:
        usage()
    elif '-v' in sys.argv:
        version()
    elif len(sys.argv) < 2:
        usage()

    filename = sys.argv[1]

    if not os.path.exists(filename):
        print >> sys.stderr, "error: file '%s' not found"
        return 3

    with open(filename) as f:
        patch = f.read()

    lines = patch.split('\n')
    _fixup(lines)
    print '\n'.join(lines)
    return 0

if __name__ == '__main__':
    sys.exit(main())
