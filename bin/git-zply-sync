#!/bin/bash
CMD='git zply-sync'
USAGE="usage: $CMD [-b <branch>] [-c] [-h] [-p <remote>/<branch>] [-v] <patches-dir> <patch-repo-dir>"
VERSION=0.1

GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

function add_file() {
    local bn=`basename $1`
    colorize $GREEN "A $bn"
    cp $1 . || die "cp failed: $bn"
    git add $bn || die "git add failed for $bn"
    RET=1
}

function colorize() {
    COLOR=$1
    shift
    if [[ $ZPLY_COLOR -eq 1 ]]; then
        echo -e ${COLOR}${@}${NC}
    else
        echo $@
    fi
}

function die() {
    >&2 echo "[$CMD error]: $@"
    exit 2
}

function die_usage() {
    >&2 echo $USAGE
    exit 2
}

git_checkout_existing() {
    git checkout -q $1 2>/dev/null || die "git checkout $1 failed"
}

git_checkout_new() {
    git checkout -q -b $1 || die "git checkout -b $1 failed"
}

git_pull() {
    git pull -q $1 $2 || die "git pull $1 $2 failed"
}

function help() {
    echo $USAGE
    exit 0
}

function realpath {
    echo $(cd $(dirname $1); pwd)/$(basename $1);
}

function remove_file() {
    local bn=`basename $1`
    colorize $RED "R $bn"
    git rm $bn > /dev/null || die "git rm failed for $bn"
    RET=1
}

function update_file() {
    local bn=`basename $1`
    colorize $YELLOW "U $bn"
    cp $1 . || die "cp failed: $bn"
    git add $bn || die "git add failed for $bn"
    RET=1
}

function version() {
    echo $VERSION
    exit 0
}

while getopts 'b:chp:v' opt; do
    case $opt in
        b) BRANCH=$OPTARG;;
        c) ZPLY_COLOR=1;;
        h) help;;
        p) PULL_REMOTE=$OPTARG;;
        v) version;;
        *) die_usage;;
    esac
done
shift $(($OPTIND - 1))

if [[ -z $1 ]] || [[ -z $2 ]]; then
    die_usage
fi

PATCHES_DIR=`realpath $1`
PATCH_REPO_DIR=`realpath $2`

if [[ ! -e $PATCH_REPO_DIR ]]; then
    die "Patch repo directory not found"
elif [[ ! -e $PATCH_REPO_DIR/.git ]]; then
    die "Patch repo is not a git repo (did you git init it?)"
fi

RET=0

# git add new/updated patches; git rm unused patches
pushd $PATCH_REPO_DIR > /dev/null

if [[ -n $PULL_REMOTE ]]; then
    if [[ $PULL_REMOTE != */* ]]; then
        die "-p argument must be of form '<remote>/<branch>'"
    fi

    PATCH_REPO_REMOTE=`echo $PULL_REMOTE | cut -d/ -f1`
    PATCH_REPO_BRANCH=`echo $PULL_REMOTE | cut -d/ -f2`
    git_pull $PATCH_REPO_REMOTE $PATCH_REPO_BRANCH
    git_checkout_existing $PATCH_REPO_BRANCH
fi

if [[ -n $BRANCH ]]; then
    git_checkout_new $BRANCH
fi

# Copy patches into patch repo
for patch in `ls $PATCHES_DIR/*.patch`; do
    repo_patch=$PATCH_REPO_DIR/`basename $patch`
    if [[ -e $repo_patch ]]; then
        git zply-diff $patch $repo_patch > /dev/null
        if [[ $? -eq 1 ]]; then
            update_file $patch
        elif [[ $? -gt 1 ]]; then
            die "git zply-diff failed"
        fi
    else
        add_file $patch
    fi
done

# Remove unused patches
for patch in `ls *.patch`; do
    if [[ ! -e $PATCHES_DIR/`basename $patch` ]]; then
        remove_file $patch
    fi
done

# Sync .based-on file
BASED_ON=$PATCHES_DIR/.based-on
if [[ -e .based-on ]]; then
    diff $BASED_ON .based-on > /dev/null
    if [[ $? -eq 1 ]]; then
        update_file $BASED_ON
    fi
else
    add_file $BASED_ON
fi

popd > /dev/null

exit $RET
