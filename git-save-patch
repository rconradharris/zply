#!/bin/bash
#
# NAME
#
#   git-save-patch - save patch series to patch repo
#
# SYNOPSIS
#
#   git-save-patch <patch-repo-path> <since>
#
# DESCRIPTION
#
#   Creates a series of patches and saves them into the patch repo.
#
# OUTPUT
#
#   Prints current step to stdout
#
# EXIT STATUS
#
#   0 - success
#   1 - failure

function die() {
    >&2 echo $@
    exit 1
}

function realpath {
    echo $(cd $(dirname $1); pwd)/$(basename $1);
}

if [[ -z $1 ]] || [[ -z $2 ]]; then
    die "usage: git save-patch <patch-repo-path> <since>"
fi

PATCH_REPO_PATH=`realpath $1`
SINCE=$2
FORMAT_PATH=$PWD/.patches
BASED_ON_HASH=`git show --pretty="%H" $SINCE`

# TODO: Verify PATCH_REPO_PATH exists
# TODO: Verify PATCH_REPO_PATH is a git repository

git zply-format $FORMAT_PATH $SINCE
git zply-sync $FORMAT_PATH $PATCH_REPO_PATH
rm -rf $FORMAT_PATH

# Commit
echo "Commiting patches..."
pushd $PATCH_REPO_PATH > /dev/null
git add *.patch
cat > .tmp-commit-msg <<-EOF
Saving patches...
EOF

# Add based-on annotation
if [[ -n $BASED_ON_HASH ]]; then
    echo >> .tmp-commit-msg
    echo "Based-On: $BASED_ON_HASH" >> .tmp-commit-msg
fi

# -t would abort the commit if the message was not edited; we don't want to
# require that in all cases, so using -eF instead
git commit -qeF .tmp-commit-msg
rm .tmp-commit-msg
popd > /dev/null
echo "Done."
